// Запрещаем одновременное выполнение билдов
properties([disableConcurrentBuilds()])

pipeline {
    agent {
        label 'ubuntu'
    }
    
    // Храним последние 10 билдов и их артефакты
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    
    stages {
        stage('Clone-Git-Repo') {
            steps {
                echo "========== Start cloning git repository =========="
                // Клонируем репозиторий Git
                script {
                    try {
                        sh 'pwd'
                        sh 'git clone https://github.com/LateMouse/JenkinsTest.git'
                        sh 'mv ./JenkinsTest/docker/toolbox/Dockerfile /docker/toolbox/Dockerfile'
                    } catch (Exception e) {
                        echo "Ошибка при клонировании репозитория: ${e.message}"
                        error("Сборка прервана.")
                    }
                }
            }
        }
        
        stage("Create Docker image") {
            steps {
                echo "========== Start building image =========="
                script {
                    try {
                        dir('/docker/toolbox') {
                            sh 'docker build -t test-server .'
                        }
                    } catch (Exception e) {
                        echo "Ошибка при сборке Docker image: ${e.message}"
                        error("Сборка прервана.")
                    }
                }
            }
        }
        
        stage("Stop and Remove Previous Docker Container") {
            steps {
                echo "========== Stopping and removing previous Docker container =========="
                script {
                    try {
                        sh 'docker stop test-server || true'
                        sh 'docker rm test-server || true'
                    } catch (Exception e) {
                        echo "Ошибка при остановке и удалении предыдущего Docker контейнера: ${e.message}"
                        error("Сборка прервана.")
                    }
                }
            }
        }
        
        stage("Run Docker image") {
            steps {
                echo "========== Start running image =========="
                script {
                    try {
                        sh 'docker run -d -p 80:80 --name test-server test-server'
                    } catch (Exception e) {
                        echo "Ошибка при запуске Docker image: ${e.message}"
                        error("Сборка прервана.")
                    }
                }
            }
        }
        
        stage("Test Application") {
            steps {
                echo "========== Start testing application =========="
                script {
                    try {
                        def curlOutputlocal = sh(returnStdout: true, script: 'curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1')
                        if (curlOutputlocal.trim() != '200') {
                            error("Ошибка: HTTP статус не равен 200")
                        }
                        def curlOutputnet = sh(returnStdout: true, script: 'curl -s -o /dev/null -w "%{http_code}" http://172.30.0.81')
                        if (curlOutputnet.trim() != '200') {
                            error("Ошибка: HTTP статус не равен 200")
                        }
                    } catch (Exception e) {
                        echo "Ошибка при выполнении тестов: ${e.message}"
                        error("Сборка прервана.")
                    }
                }
            }
        }
    }
}
